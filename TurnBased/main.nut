// title:   Turn Based Prototype
// author:  Adrian Azan, https://github.com/adrian-azan, etc.
// desc:    A prototype for a basic fight in a turn based RPG
// license: MIT License
// version: 0.1
// script:  squirrel

#include tools.azn
#include globals.azn
#include constants.azn


#include transform.azn
#include Object.azn
#include GameObject.azn
#include MainMenu.azn



#include button.azn
#include BeatLine.azn
#include ActionLane.azn



local player = GameObject()
local menu = MainMenu(player)

local enemy = GameObject()

local actionLane = ActionLane()


player.transform.x = SCREEN_WIDTH * 0.1
player.transform.y = SCREEN_HEIGHT * 0.8
player.transform.scale = 2

enemy.transform.x = SCREEN_WIDTH * 0.8
enemy.transform.y = SCREEN_HEIGHT * 0.8
enemy.transform.scale = 2


OBJECTS.sort(SortByDepth)
function TIC()
{
	cls(10)

	print(Score, 10, 10)

	GRAPHICS_PIPELINE()
	UPDATE_PIPELINE()
	if ( btnp(2) )
		menu.Prev()

	if (btnp(3))
		menu.Next()
}


function GRAPHICS_PIPELINE()
{
	foreach (idx, val in OBJECTS)
	{
		try
		{
			val.Draw()
		}
		catch(exception)
		{
			trace("Graphics Failure" + val)
		}
	}
}

function UPDATE_PIPELINE()
{
	foreach (idx, val in OBJECTS)
	{
		try {
			val.Update()
		} catch (exception){
			trace("Update Failure" + val)
		}

	}
}

// <TILES>
// 000:0000000000000000000000000000000000000ddd0000dddd000ddddd000ddddd
// 001:00000000000000000000000000000000ddd00000dddd0000ddddd000ddddd000
// 002:0000000000000000000000000000000000000222000022220002222200022222
// 003:0000000000000000000000000000000022200000222200002222200022222000
// 004:0000000000000000000000000000000000000bbb0000bbbb000bbbbb000bbbbb
// 005:00000000000000000000000000000000bbb00000bbbb0000bbbbb000bbbbb000
// 016:000ddddd000ddddd000ddddd0000dddd00000ddd000000000000000000000000
// 017:ddddd000ddddd000ddddd000dddd0000ddd00000000000000000000000000000
// 018:0002222200022222000222220000222200000222000000000000000000000000
// 019:2222200022222000222220002222000022200000000000000000000000000000
// 020:000bbbbb000bbbbb000bbbbb0000bbbb00000bbb000000000000000000000000
// 021:bbbbb000bbbbb000bbbbb000bbbb0000bbb00000000000000000000000000000
// 032:000000000000000000000ccc0000c0000000c0000000c0000000c0000000c000
// 033:0000000000000000cc00000000c0000000c0000000c0000000c000000c000000
// 034:000000000000000c000000c0000000c000000c0000000c0000000c000000cccc
// 035:0000000000000000c0000000c00000000c0000000c0000000c000000ccc00000
// 036:000000000000000000c00000000c00000000c00000000c00000000c00000000c
// 037:000000000000000000000c000000c000000c000000c000000c000000c0000000
// 038:00000000000000000000c00000000c00000000c00000000c0000000000000000
// 039:00000000000000000000c000000c000000c000000c000000c0000000c0000000
// 048:0000cccc0000c0000000c0000000c0000000c00000000ccc0000000000000000
// 049:cc00000000c00000000c0000000c0000000c0000ccc000000000000000000000
// 050:0000c0000000c000000c0000000c000000c00000000000000000000000000000
// 051:00c0000000c00000000c0000000c00000000c000000000000000000000000000
// 052:0000000c000000c000000c000000c000000c000000c000000000000000000000
// 053:c00000000c00000000c00000000c00000000c00000000c000000000000000000
// 055:c0000000c0000000c0000000c0000000c0000000000000000000000000000000
// </TILES>

// <WAVES>
// 000:00000000ffffffff00000000ffffffff
// 001:0123456789abcdeffedcba9876543210
// 002:0123456789abcdef0123456789abcdef
// </WAVES>

// <SFX>
// 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304000000000
// </SFX>

// <TRACKS>
// 000:100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// </TRACKS>

// <PALETTE>
// 000:16171a7f0622d62411ff8426ffd100fafdffff80a4ff267494216a43006723497568aed4bfff3c10d275007899002859
// </PALETTE>

